{
    "openapi": "3.0.0",
    "servers": [ { "url": "https://swagger.io/api" } ],
    "info": {
        "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
        "version": "0.0.1",
        "title": "Edraj Api Specifications",
        "termsOfService": "http://swagger.io/terms/",
        "contact": { "email": "kefah.issa@gmail.com" },
        "license": {
            "name": "GPL v3.0",
            "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
        }
    },
    "tags": [
        { "name": "actor", "description": "Operations around the actor (aka agent)" },
        { "name": "content", "description": "Content Management" },
        { "name": "page", "description": "Public web elements" }
    ],
    "paths": {
        "/pet": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Add a new pet to the store",
                "description": "",
                "operationId": "addPet",
                "parameters": [],
                "responses": { "405": { "description": "Invalid input" } },
                "security": [ { "edraj_auth": [ "write:content", "read:content" ] } ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/requestBody1"
                }
            },
            "put": {
                "tags": [
                    "pet"
                ],
                "summary": "Update an existing pet",
                "description": "",
                "operationId": "updatePet",
                "parameters": [],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "edraj_auth": [
                            "write:content",
                            "read:content"
                        ]
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/requestBody1"
                }
            }
        },
        "/pet/findByStatus": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma separated strings",
                "operationId": "findPetsByStatus",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that need to be considered for filter",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                ],
                                "default": "available"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "edraj_auth": [
                            "write:content",
                            "read:content"
                        ]
                    }
                ]
            }
        },
        "/pet/findByTags": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTags",
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Tags to filter by",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": [
                    {
                        "edraj_auth": [
                            "write:content",
                            "read:content"
                        ]
                    }
                ],
                "deprecated": true
            }
        },
        "/pet/{petId}": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Find pet by ID",
                "description": "Returns a single pet",
                "operationId": "getPetById",
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to return",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Updates a pet in the store with form data",
                "description": "",
                "operationId": "updatePetWithForm",
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet that needs to be updated",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "edraj_auth": [
                            "write:content",
                            "read:content"
                        ]
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Updated name of the pet",
                                        "type": "string",
                                        "required": false
                                    },
                                    "status": {
                                        "description": "Updated status of the pet",
                                        "type": "string",
                                        "required": false
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "pet"
                ],
                "summary": "Deletes a pet",
                "description": "",
                "operationId": "deletePet",
                "parameters": [
                    {
                        "name": "api_key",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "Pet id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "edraj_auth": [
                            "write:content",
                            "read:content"
                        ]
                    }
                ]
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "uploads an image",
                "description": "",
                "operationId": "uploadFile",
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "edraj_auth": [
                            "write:content",
                            "read:content"
                        ]
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    }
                }
            }
        },
        "/store/inventory": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Returns pet inventories by status",
                "description": "Returns a map of status codes to quantities",
                "operationId": "getInventory",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/store/order": {
            "post": {
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "description": "",
                "operationId": "placeOrder",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Order"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "description": "order placed for purchasing the pet",
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        }
                    }
                }
            }
        },
        "/store/order/{orderId}": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
                "operationId": "getOrderById",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "integer",
                        "maximum": 10,
                        "minimum": 1,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "store"
                ],
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
                "operationId": "deleteOrder",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "ID of the order that needs to be deleted",
                        "required": true,
                        "type": "integer",
                        "minimum": 1,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/actor": {
            "post": {
                "tags": [ "actor" ],
                "summary": "Create actor",
                "description": "This can only be done by the logged in admin.",
                "operationId": "createActor",
                "parameters": [],
                "responses": { "default": { "description": "successful operation" } },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "description": "Created Actor object",
                            "schema": { "$ref": "#/components/schemas/Actor" }
                        }
                    }
                }
            }
        },
        "/actor/login": {
            "get": {
                "tags": [ "actor" ],
                "summary": "Logs actor into the system",
                "description": "",
                "operationId": "loginActor",
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The user name for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "The password for login in clear text",
                        "required": true,
                        "type": "string",
                        "format": "password"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {
                            "X-Rate-Limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "calls per hour allowed by the user"
                            },
                            "X-Expires-After": {
                                "type": "string",
                                "format": "date-time",
                                "description": "date in UTC when token expires"
                            }
                        },
                        "content": {
                            "application/xml": { "schema": { "type": "string" } },
                            "application/json": { "schema": { "type": "string" }
                            }
                        }
                    },
                    "400": { "description": "Invalid username/password supplied" }
                }
            }
        },
        "/actor/logout": {
            "get": {
                "tags": [ "actor" ],
                "summary": "Logs out current logged in user session",
                "description": "",
                "operationId": "logoutActor",
                "parameters": [],
                "responses": { "default": { "description": "successful operation" } }
            }
        },
        "/actor/{username}": {
            "get": {
                "tags": [ "actor" ],
                "summary": "Get user by user name",
                "description": "",
                "operationId": "getUserByName",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be fetched. Use user1 for testing. ",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": { "schema": { "$ref": "#/components/schemas/Actor" } },
                            "application/json": { "schema": { "$ref": "#/components/schemas/Actor" } }
                        }
                    },
                    "400": { "description": "Invalid username supplied" },
                    "404": { "description": "User not found" }
                }
            },
            "put": {
                "tags": [ "actor" ],
                "summary": "Updated actor",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateActor",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "name that need to be updated",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": { "description": "Invalid user supplied" },
                    "404": { "description": "User not found" }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "description": "Updated user object",
                            "schema": { "$ref": "#/components/schemas/Actor" }
                        }
                    }
                }
            },
            "delete": {
                "tags": [ "actor" ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteActor",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": { "description": "Invalid username supplied" },
                    "404": { "description": "User not found" }
                }
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    },
    "components": {
        "schemas": {
            "Order": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "petId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "shipDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "description": "Order Status",
                        "enum": [
                            "placed",
                            "approved",
                            "delivered"
                        ]
                    },
                    "complete": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "xml": {
                    "name": "Order"
                }
            },
            "Category": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Category"
                }
            },
            "Actor": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "format": "int64" },
                    "username": { "type": "string" },
                    "firstName": { "type": "string" },
                    "lastName": { "type": "string" },
                    "email": { "type": "string" },
                    "password": { "type": "string" },
                    "phone": { "type": "string" },
                    "userStatus": { "type": "integer", "format": "int32", "description": "User Status" }
                },
                "xml": { "name": "User" }
            },
            "Tag": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "format": "int64" },
                    "name": { "type": "string" }
                },
                "xml": { "name": "Tag" }
            },
            "Content": {
                "type": "object",
                "required": [ "name", "photoUrls" ],
                "properties": {
                    "id": { "type": "integer", "format": "int64" },
                    "category": { "$ref": "#/components/schemas/Category" },
                    "name": { "type": "string", "example": "doggie" },
                    "photoUrls": {
                        "type": "array",
                        "xml": { "name": "photoUrl", "wrapped": true },
                        "items": { "type": "string" }
                    },
                    "tags": {
                        "type": "array",
                        "xml": { "name": "tag", "wrapped": true },
                        "items": { "$ref": "#/components/schemas/Tag" }
                    },
                    "status": {
                        "type": "string",
                        "description": "actor status",
                        "enum": [
                            "available",
                            "offline",
                            "suspended"
                        ]
                    }
                },
                "xml": { "name": "Pet" }
            },
            "ApiResponse": {
                "type": "object",
                "properties": {
                    "code": { "type": "integer", "format": "int32" },
                    "type": { "type": "string" },
                    "message": { "type": "string" }
                }
            }
        },
        "responses": {},
        "parameters": {},
        "examples": {},
        "requestBodies": {
            "requestBody1": {
                "content": {
                    "application/json": {
                        "description": "Pet object that needs to be added to the store",
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    },
                    "application/xml": {
                        "description": "Pet object that needs to be added to the store",
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    }
                }
            },
            "requestBody2": {
                "content": {
                    "application/json": {
                        "description": "List of user object",
                        "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Actor" } }
                    }
                }
            }
        },
        "securitySchemes": {
            "edraj_auth": {
                "type": "oauth2",
                "flows": {
                    "implicit": {
                        "authorizationUrl": "http://edraj.io/oauth/dialog",
                        "scopes": { "write:content": "modify content", "read:content": "read content" }
                    }
                }
            },
            "api_key": { "type": "apiKey", "name": "api_key", "in": "header" }
        },
        "headers": {},
        "links": {},
        "callbacks": {}
    },
    "security": []
}
