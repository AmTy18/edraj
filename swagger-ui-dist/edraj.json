{
    "openapi": "3.0.0",
    "servers": [{ "url": "https://edraj.io/api" }],
    "info": {
        "description": "This is work-in-progress for edraj api.  You can find out more about it at [https://edraj.io](https://edraj.io).",
        "version": "0.0.1",
        "title": "Edraj Api Specifications",
        "termsOfService": "https://edraj.io/public/terms/",
        "contact": { "email": "kefah.issa@gmail.com" },
        "license": {
            "name": "GPL v3.0",
            "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
        }
    },
    "tags": [
        { "name": "actor", "description": "Operations around the actor (aka agent)" },
        { "name": "content", "description": "Content Management" },
        { "name": "domain", "description": "Domain Registry" },
        { "name": "schema", "description": "Schema Registry" },
        { "name": "addon", "description": "Addons repo" },
        { "name": "public_miner", "description": "Public miners repo" },
        { "name": "notification", "description": "Notifications subscribtion and publishing" },
        { "name": "local_miner", "description": "Private miner on the local and harvested content" },
        { "name": "page", "description": "Public web elements" }
    ],
    "paths": {
        "/content": {
            "post": {
                "tags": ["content"],
                "summary": "Add a new content",
                "description": "",
                "operationId": "addContent",
                "parameters": [],
                "responses": { "405": { "description": "Invalid input" } },
                "security": [{ "edraj_auth": ["write:content", "read:content"] }],
                "requestBody": { "content": { "application/json": { "description": "Content object ", "schema": { "$ref": "#/components/schemas/Content" } } } }
            }
        },
        "/content/findByTags": {
            "get": {
                "tags": ["content"],
                "summary": "Finds Content by tags",
                "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findContentByTags",
                "parameters": [{
                    "name": "tags",
                    "in": "query",
                    "description": "Tags to filter by",
                    "required": true,
                    "schema": { "type": "array", "items": { "type": "string" } }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Content" } } } }
                    },
                    "400": { "description": "Invalid tag value" }
                }
            }
        },
        "/content/{contentId}": {
            "get": {
                "tags": ["content"],
                "summary": "Find content by ID",
                "description": "Returns a single content",
                "operationId": "getContentById",
                "parameters": [{
                    "name": "contentId",
                    "in": "path",
                    "description": "ID of content to return",
                    "required": true,
                    "type": "string",
                    "format": "uuid"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Content" } } }
                    },
                    "400": { "description": "Invalid ID supplied" },
                    "404": { "description": "Content not found" }
                }
            },
            "post": {
                "tags": ["content"],
                "summary": "Updates a content with form data",
                "description": "",
                "operationId": "updateContentWithForm",
                "parameters": [{
                    "name": "contentId",
                    "in": "path",
                    "description": "ID of content that needs to be updated",
                    "required": true,
                    "type": "string",
                    "format": "uuid"
                }],
                "responses": { "405": { "description": "Invalid input" } },
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Updated name of the content",
                                        "type": "string",
                                        "required": false
                                    },
                                    "status": {
                                        "description": "Updated status of the content",
                                        "type": "string",
                                        "required": false
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["content"],
                "summary": "Deletes a content",
                "description": "",
                "operationId": "deleteContent",
                "parameters": [{
                    "name": "contentId",
                    "in": "path",
                    "description": "Content id to delete",
                    "required": true,
                    "type": "string",
                    "format": "uuid"
                }],
                "responses": {
                    "400": { "description": "Invalid ID supplied" },
                    "404": { "description": "Content not found" }
                }
            }
        },
        "/content/{contentId}/uploadPayload": {
            "post": {
                "tags": ["content"],
                "summary": "uploads the binay payload",
                "description": "",
                "operationId": "uploadFile",
                "parameters": [{
                    "name": "contentId",
                    "in": "path",
                    "description": "ID of content to update",
                    "required": true,
                    "type": "string",
                    "format": "uuid"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiResponse" } } }
                    }
                },
                "requestBody": { "content": { "application/octet-stream": { "schema": { "type": "string", "format": "binary" } } } }
            }
        },
        "/actor": {
            "post": {
                "tags": ["actor"],
                "summary": "Create actor",
                "description": "This can only be done by the logged in admin.",
                "operationId": "createActor",
                "parameters": [],
                "responses": { "default": { "description": "successful operation" } },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "description": "Created Actor object",
                            "schema": { "$ref": "#/components/schemas/Actor" }
                        }
                    }
                }
            }
        },
        "/actor/login": {
            "get": {
                "tags": ["actor"],
                "summary": "Logs actor into the system",
                "description": "",
                "operationId": "loginActor",
                "parameters": [{
                        "name": "username",
                        "in": "query",
                        "description": "The user name for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "The password for login in clear text",
                        "required": true,
                        "type": "string",
                        "format": "password"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": { "type": "string" }
                            }
                        }
                    },
                    "400": { "description": "Invalid username/password supplied" }
                }
            }
        },
        "/actor/logout": {
            "get": {
                "tags": ["actor"],
                "summary": "Logs out current logged in user session",
                "description": "",
                "operationId": "logoutActor",
                "parameters": [],
                "responses": { "default": { "description": "successful operation" } }
            }
        },
        "/actor/{username}": {
            "get": {
                "tags": ["actor"],
                "summary": "Get user by user name",
                "description": "",
                "operationId": "getUserByName",
                "parameters": [{
                    "name": "username",
                    "in": "path",
                    "description": "The name that needs to be fetched. Use user1 for testing. ",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": { "schema": { "$ref": "#/components/schemas/Actor" } },
                            "application/json": { "schema": { "$ref": "#/components/schemas/Actor" } }
                        }
                    },
                    "400": { "description": "Invalid username supplied" },
                    "404": { "description": "User not found" }
                }
            },
            "put": {
                "tags": ["actor"],
                "summary": "Updated actor",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateActor",
                "parameters": [{
                    "name": "username",
                    "in": "path",
                    "description": "name that need to be updated",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "400": { "description": "Invalid user supplied" },
                    "404": { "description": "User not found" }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "description": "Updated user object",
                            "schema": { "$ref": "#/components/schemas/Actor" }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["actor"],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteActor",
                "parameters": [{
                    "name": "username",
                    "in": "path",
                    "description": "The name that needs to be deleted",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "400": { "description": "Invalid username supplied" },
                    "404": { "description": "User not found" }
                }
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Edraj",
        "url": "https://edraj.io"
    },
    "components": {
        "schemas": {
            "GeoPoint": {
                "type": "object",
                "description": "Geo coordinates",
                "properties": {
                    "latitude": { "type": "number", "description": "Latitude" },
                    "longitude": { "type": "number", "description": "Longitude" }
                },
                "required": ["latitude", "longitude"]
            },
            "MediaType": {
                "type": "string",
                "enum": ["image/png", "audio/mp3", "video/mp4", "sqlite", "markdown", "plain_text", "document", "structured", "application/json"]
            },
            "File": {
                "type": "object",
                "properties": {
                    "media_type": { "$ref": "#/components/schemas/MediaType" },
                    "file_name": { "type": "string" },
                    "id": { "type": "string", "format": "uuid" },
                    "checksum": { "type": "object", "properties": { "algorithm": { "type": "string", "enum": ["md5", "sha256"] }, "value": { "type": "string" } } },
                    "path": { "type": "string" },
                    "references": { "type": "array", "itmes": { "type": "string", "format": "uuid" } },
                    "OneOf": {
                        "binary": { "type": "string", "format": "binary" },
                        "text": { "type": "string" },
                        "path": { "type": "string" },
                        "url": { "type": "string" }
                    }
                }
            },
            "Identity": {
                "type": "object",
                "properties": {
                    "id": { "type": "string", "format": "uuid" },
                    "pretty_name": { "type": "string" },
                    "unique_name": { "type": "string" },
                    "pulic_keys": { "type": "array", "items": { "type": "string" } },
                    "domain": { "type": "string" }
                }
            },
            "ActorGroup": {
                "type": "object",
                "properties": {
                    "uuid": { "type": "string", "format": "uuid" },
                    "name": { "type": "string" },
                    "members": { "type": "array", "items": { "$ref": "#/components/schemas/Identity" } }
                }
            },
            "Actor": {
                "type": "object",
                "properties": {
                    "uuid": { "type": "string", "format": "uuid" },
                    "pretty_name": { "type": "string" },
                    "unique_name": { "type": "string" },
                    "biography": { "type": "string" },
                    "domain": { "type": "string" },
                    "emails": { "type": "array", "items": { "type": "string", "format": "email" } },
                    "related-actors": { "type": "array", "items": { "$ref": "#/components/schemas/Identity" } },
                    "actor-groups": { "type": "array", "items": { "$ref": "#/components/schemas/ActorGroup" } },
                    "organizations": { "type": "array", "items": { "type": "string" } },
                    "phones": { "type": "array", "items": { "type": "string" } },
                    "urls": { "type": "array", "items": { "type": "string" } }
                }
            },
            "Workgroup": {
                "type": "object",
                "properties": {
                    "id": { "type": "string", "format": "uuid" },
                    "pretty_name": { "type": "string" },
                    "unique_name": { "type": "string" },
                    "members": { "type": "array", "items": { "type": "string", "format": "uuid" } },
                    "permissions": { "type": "array", "items": { "$ref": "#/components/schemas/Permission" } }
                }
            },
            "Message": {
                "type": "object",
                "properties": {
                    "thread_id": { "type": "string", "format": "uuid" },
                    "recipients": { "type": "array", "items": { "$ref": "#/components/schemas/Identity" } },
                    "sender": { "$ref": "#/components/schemas/Identity" },
                    "id": { "type": "string", "format": "uuid" },
                    "timestamp": { "type": "string", "format": "date-time" },
                    "geo_point": { "$ref": "#/components/schemas/GeoPoint" },
                    "subject": { "type": "string" },
                    "body": { "type": "string" },
                    "attachments": { "type": "array", "items": { "$ref": "#/components/schemas/File" } }
                }
            },
            "Permission": {
                "type": "object",
                "properties": {
                    "type": { "type": "string", "enum": ["admin", "write", "read", "delete", "query", "manage_reactions"] },
                    "grantees": { "type": "array", "items": { "type": "string", "format": "uuid" } }
                }
            },
            "Change": {
                "type": "object",
                "properties": {
                    "when": { "type": "string", "format": "date-time" },
                    "who": { "type": "string", "format": "uuid" },
                    "what": { "type": "string", "format": "binary" }
                }
            },
            "Content": {
                "type": "object",
                "properties": {
                    "owner_id": { "type": "string", "format": "uuid" },
                    "id": { "type": "string", "format": "uuid" },
                    "timestamp": { "type": "string", "format": "date-time" },
                    "geo_point": { "$ref": "#/components/schemas/GeoPoint" },
                    "title": { "type": "string" },
                    "unique_name": { "type": "string" },
                    "body": { "type": "string" },
                    "tags": { "type": "array", "items": { "type": "string" } },
                    "categories": { "type": "array", "items": { "type": "string" } },
                    "permissions": { "type": "array", "items": { "$ref": "#/components/schemas/Permission" } },
                    "payload": { "type": "array", "items": { "$ref": "#/components/schemas/File" } },
                    "history": { "type": "array", "items": { "$ref": "#/components/schemas/Change" } }
                }
            },
            "Comment": {
                "type": "object",
                "properties": {
                    "id": { "type": "string", "format": "uuid" },
                    "actor": { "$ref": "#/components/schemas/Identity" },
                    "timestamp": { "type": "string", "format": "date-time" },
                    "geo_point": { "$ref": "#/components/schemas/GeoPoint" },
                    "parent_comment": { "type": "string", "format": "uuid" },
                    "content_id": { "type": "string", "format": "uuid" },
                    "text": { "type": "string" }
                }
            },
            "Reaction": {
                "type": "object",
                "properties": {
                    "id": { "type": "string", "format": "uuid" },
                    "actor": { "$ref": "#/components/schemas/Identity" },
                    "timestamp": { "type": "string", "format": "date-time" },
                    "content_id": { "type": "string", "format": "uuid" },
                    "geo_point": { "$ref": "#/components/schemas/GeoPoint" },
                    "type": { "type": "string", "enum": ["like", "dislike", "love", "sad", "angry", "laugh", "disgusted"] }
                }
            },
            "Container": {
                "type": "object",
                "properties": {
                    "owner_id": { "type": "string", "format": "uuid" },
                    "id": { "type": "string", "format": "uuid" },
                    "timestamp": { "type": "string", "format": "date-time" },
                    "name": { "type": "string" },
                    "unique_name": { "type": "string" },
                    "tags": { "type": "array", "items": { "type": "string" } },
                    "categories": { "type": "array", "items": { "type": "string" } },
                    "permissions": { "type": "array", "items": { "$ref": "#/components/schemas/Permission" } }
                }
            },
            "Notification": {
                "type": "object",
                "properties": {
                    "id": { "type": "string", "format": "uuid" },
                    "when": { "type": "string", "format": "date-time" },
                    "who": { "type": "string", "format": "uuid" },
                    "what": { "type": "string", "format": "binary" }
                }
            },
            "Layout": {
                "type": "object",
                "properties": {
                    "id": { "type": "string", "format": "uuid" },
                    "name": { "type": "string" },
                    "menu": { "type": "string" },
                    "tempate": { "type": "string" }
                }
            },
            "Page": {
                "type": "object",
                "properties": {
                    "id": { "type": "string", "format": "uuid" },
                    "name": { "type": "string" },
                    "tempate": { "type": "string" },
                    "blocks": { "item": "array", "items": { "type": "string", "format": "uuid" } }
                }
            },
            "Block": {
                "type": "object",
                "properties": {
                    "id": { "type": "string", "format": "uuid" },
                    "name": { "type": "string" },
                    "filter": { "type": "object" },
                    "tempate": { "type": "string" }
                }
            },
            "ApiResponse": {
                "type": "object",
                "properties": {
                    "code": { "type": "integer", "format": "int32" },
                    "type": { "type": "string" },
                    "message": { "type": "string" }
                }
            }
        },
        "responses": {},
        "parameters": {},
        "examples": {},
        "requestBodies": {},
        "securitySchemes": {},
        "headers": {},
        "links": {},
        "callbacks": {}
    },
    "security": []
}